@page "/UsuarioEditar"
@page "/Usuario/{idUsuarioEditar:int}"

@using AsistenciasCrud.Shared;
@using AsistenciasCrud.Client.NewFolder;

@inject IUsuarioService UsuarioService;
@inject NavigationManager navegacion;

<h3>@titulo</h3>

<EditForm Model="usuarioDatos" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="usuarioDatos.Nombre" />
        <ValidationMessage For="@(() => usuarioDatos.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Apellido paterno</label>
        <InputText class="form-control" @bind-Value="usuarioDatos.ApellidoP" />
        <ValidationMessage For="@(() => usuarioDatos.ApellidoP)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Apellido materno</label>
        <InputText class="form-control" @bind-Value="usuarioDatos.ApellidoM" />
        <ValidationMessage For="@(() => usuarioDatos.ApellidoM)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Correo</label>
        <InputText class="form-control" @bind-Value="usuarioDatos.Correo" />
        <ValidationMessage For="@(() => usuarioDatos.Correo)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Teléfono</label>
        <InputText class="form-control" @bind-Value="usuarioDatos.Telefono" />
        <ValidationMessage For="@(() => usuarioDatos.Telefono)" />
    </div>

    <button class="btn btn-primary" type="submit">@botonTexto</button>
    <a class="btn btn-secondary ms-2" href="/usuarios">Volver</a>
</EditForm>

@code {
    [Parameter]
    public int idUsuarioEditar { get; set; } = 0;

    private Usuarios usuarioDatos = new Usuarios();
    private string titulo = "Nuevo Usuario";
    private string botonTexto = "Guardar";

    protected override async Task OnInitializedAsync()
    {
        if (idUsuarioEditar != 0)
        {
            try
            {
                usuarioDatos = await UsuarioService.Buscar(idUsuarioEditar);
                titulo = "Editar Usuario";
                botonTexto = "Actualizar";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al buscar el usuario: {ex.Message}");
            }
        }
        else
        {
            usuarioDatos = new Usuarios(); // Nueva instancia si es un usuario nuevo
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (idUsuarioEditar == 0)
            {
                var idNuevo = await UsuarioService.Guardar(usuarioDatos);
                if (idNuevo != 0)
                {
                    navegacion.NavigateTo("/usuarios");
                }
            }
            else
            {
                var actualizado = await UsuarioService.Editar(idUsuarioEditar, usuarioDatos);
                if (actualizado != 0)
                {
                    navegacion.NavigateTo("/usuarios");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar o actualizar el usuario: {ex.Message}");
        }
    }
}

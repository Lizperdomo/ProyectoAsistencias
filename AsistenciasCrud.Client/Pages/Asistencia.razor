@page "/asistencia"
@page "/asistencia/{idAsistencia:int}"

@using AsistenciasCrud.Shared;
@using AsistenciasCrud.Client.NewFolder;

@inject IAsistenciaService asistenciaService;
@inject IUsuarioService usuarioService;
@inject NavigationManager navegacion;

<h3>@titulo</h3>

<EditForm Model="asistenciaDTO" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Usuario</label>
        <select class="form-control" @bind="asistenciaDTO.IdUsuario">
            <option value="">Seleccione un Usuario</option>
            @foreach (var usuario in usuarios)
            {
                <option value="@usuario.IdUsuario">@usuario.Nombre</option>
            }
        </select>
        <ValidationMessage For="@(() => asistenciaDTO.IdUsuario)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha</label>
        <InputDate class="form-control" @bind-Value="asistenciaDTO.Fecha" TValue="DateOnly" />
        <ValidationMessage For="@(() => asistenciaDTO.Fecha)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Hora Entrada</label>
        <input type="time" class="form-control" @bind="asistenciaDTO.HoraEntrada" />
        <ValidationMessage For="@(() => asistenciaDTO.HoraEntrada)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Hora Salida</label>
        <input type="time" class="form-control" @bind="asistenciaDTO.HoraSalida" />
        <ValidationMessage For="@(() => asistenciaDTO.HoraSalida)" />
    </div>

    <button class="btn btn-primary" type="submit">@botonTexto</button>
    <a class="btn btn-secondary ms-2" href="/asistencias">Volver</a>
</EditForm>

@code {
    [Parameter]
    public int idAsistencia { get; set; } = 0;

    private AsistenciaDTO asistenciaDTO = new AsistenciaDTO();
    private List<UsuariosDTO> usuarios = new List<UsuariosDTO>();
    private string titulo = "Nueva Asistencia";
    private string botonTexto = "Guardar";

    protected override async Task OnInitializedAsync()
    {
        usuarios = await usuarioService.Mostrar();

        if (idAsistencia != 0)
        {
            var asistencia = await asistenciaService.Buscar(idAsistencia);
            asistenciaDTO = ConvertirAAsistenciaDTO(asistencia);
            titulo = "Editar Asistencia";
            botonTexto = "Actualizar";
        }
        else
        {
            asistenciaDTO.Fecha = DateOnly.FromDateTime(DateTime.Now);
        }
    }

    private async Task OnValidSubmit()
    {
        if (idAsistencia == 0)
        {
            var idNuevo = await asistenciaService.Guardar(ConvertirAAsistencia(asistenciaDTO));
            if (idNuevo != 0)
            {
                navegacion.NavigateTo("/asistencias");
            }
        }
        else
        {
            var actualizado = await asistenciaService.Editar(ConvertirAAsistencia(asistenciaDTO));
            if (actualizado != 0)
            {
                navegacion.NavigateTo("/asistencias");
            }
        }
    }

    private Asistencias ConvertirAAsistencia(AsistenciaDTO dto)
    {
        return new Asistencias
            {
                IdAsistencia = dto.IdAsistencia,
                IdUsuario = dto.IdUsuario,
                Fecha = dto.Fecha,
                HoraEntrada = dto.HoraEntrada,
                HoraSalida = dto.HoraSalida
            };
    }

    private AsistenciaDTO ConvertirAAsistenciaDTO(Asistencias asistencia)
    {
        return new AsistenciaDTO
            {
                IdAsistencia = asistencia.IdAsistencia,
                IdUsuario = asistencia.IdUsuario,
                Fecha = asistencia.Fecha,
                HoraEntrada = asistencia.HoraEntrada,
                HoraSalida = asistencia.HoraSalida
            };
    }
}
